// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// for tracking if user is student or instructor
enum Role {
  Student
  Instructor
}

// for tracking different attendance values
enum AttendanceValue {
  Present
  Absent
  Late
  Pending
}

// model for user objects (students and instructors)
model User {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId // auto generated MongoDB object id
  blazerId    String             @unique
  name        String
  role        Role
  courses     Course[]           @relation("Instructor") // (for instructors) stores relationships of Instructor to Course
  enrollments Enrollment[] // (for students) stores relationships of User to Enrollment
  attendance  AttendanceRecord[] // (for students) stores attendance records  
  createdAt   DateTime           @default(now()) // stores date and time created so that data can be deleted after a time (i.e., when semester's over)

  @@map("Users")  
}

// model for course objects (instructor)
model Course {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId // auto generated MongoDB object id
  canvasId     String             @unique
  instructorId String             @db.ObjectId // for storing instructor's id value from User object
  instructor   User               @relation("Instructor", fields: [instructorId], references: [id]) // relates Course's instructor id to instructor's user id
  schedule     Json // stores class schedule                      
  students     Enrollment[] // stores relationships of Course to student Enrollment           
  attendance   AttendanceRecord[] // stores attendance records
  location     ClassroomLocation? @relation("CourseLocation") // stores classroom location of course    
  createdAt    DateTime           @default(now()) // stores date and time created so that data can be deleted after a time (i.e., when semester's over)

  @@map("Courses")  
}

// model for course objects (student)
model Enrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // auto generated MongoDB object id
  studentId String   @db.ObjectId // for storing student's id value from User object
  student   User     @relation(fields: [studentId], references: [id]) // relates studentId value to id from User object
  courseId  String   @db.ObjectId // for storing course's id value from Course object
  course    Course   @relation(fields: [courseId], references: [id]) // relates courseId value to id from Course object
  createdAt DateTime @default(now()) // stores date and time created so that data can be deleted after a time (i.e., when semester's over)  

  @@map("Enrollments")
}

// model for attendance records (student)
model AttendanceRecord {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId // auto generated MongoDB object id
  studentId    String          @db.ObjectId // for storing student's id value from User object
  student      User            @relation(fields: [studentId], references: [id]) // relates studentId value to id from User object
  courseId     String          @db.ObjectId // for storing course's id value from Course object
  course       Course          @relation(fields: [courseId], references: [id]) // relates courseId value to id from Course object
  latitude     Float?
  longitude    Float?
  withinRadius Boolean         @default(false)
  status       AttendanceValue @default(Pending) // stores attendance value (default value = Pending)
  timestamp    DateTime        @default(now()) // stores date and time that attendance value was recorded
  createdAt    DateTime        @default(now()) // stores date and time created so that data can be deleted after a time (i.e., when semester's over)

  @@map("AttendanceRecords")  
}

model ClassroomLocation {
  id        String @id @default(auto()) @map("_id") @db.ObjectId // auto-generated MongoDB object id
  courseId  String @unique @db.ObjectId // for storing course's id value from Course object
  course    Course @relation("CourseLocation", fields: [courseId], references: [id]) // relates courseId value to id from User object
  latitude  Float
  longitude Float
  radius    Float // acceptable radius for check-in

  @@map("ClassroomLocations") 
}

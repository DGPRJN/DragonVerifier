// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// for tracking if user is student or instructor
enum Role {
    Student
    Instructor
}

// for tracking different attendance values
enum AttendanceValue {
    Present
    Absent
    Late
    Pending
}

// model for user objects (students and instructors)
model User {
    id           String             @id @default(auto()) @map("_id") @db.ObjectId // auto generated MongoDB object id
    canvasUserId String             @unique
    name         String
    role         Role
    courses      Course[]           @relation("Instructor") // (for instructors) stores relationships of Instructor to Course
    enrollments  Enrollment[] // (for students) stores relationships of User to Enrollment
    attendance   AttendanceRecord[] // (for students) stores attendance records  
    createdAt    DateTime           @default(now()) // stores date and time created so that data can be deleted after a time (i.e., when semester's over)

    @@map("Users")
}

// model for course objects (instructor)
model Course {
    id           String             @id @default(auto()) @map("_id") @db.ObjectId // auto generated MongoDB object id
    canvasId     String             @unique
    name         String
    instructorId String             @db.ObjectId // for storing instructor's id value from User object
    instructor   User               @relation("Instructor", fields: [instructorId], references: [id]) // relates Course's instructor id to instructor's user id
    canvasUserId     String             @unique
    schedule     Json // stores class schedule                   
    students     Enrollment[] // stores relationships of Course to student Enrollment           
    attendance   AttendanceRecord[] // stores attendance records
    location     ClassroomLocation? @relation("CourseLocation") // stores classroom location of course    
    createdAt    DateTime           @default(now()) // stores date and time created so that data can be deleted after a time (i.e., when semester's over)
    datesArray   DateTime[]
    geolocationEnabled Boolean      @default(false)
    enableGrading Boolean           @default(false)
    entrySlip     Boolean           @default(false)
    exitSlip      Boolean           @default(false)

    @@map("Courses")
}

// model for course objects (student)
model Enrollment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  canvasId     String
  studentId    String   @db.ObjectId
  student      User     @relation(fields: [studentId], references: [id])
  canvasUserId String
  courseId     String   @db.ObjectId
  course       Course   @relation(fields: [courseId], references: [id])
  createdAt    DateTime @default(now())

  @@map("Enrollments")
  @@unique([canvasUserId, canvasId]) // This is the correct constraint
}

// model for attendance records (student)
model AttendanceRecord {
    id           String          @id @default(auto()) @map("_id") @db.ObjectId // auto generated MongoDB object id
    studentId    String          @db.ObjectId // for storing student's id value from User object
    student      User            @relation(fields: [studentId], references: [id]) // relates studentId value to id from User object
    canvasUserId String
    canvasId     String          // stores course canvas id
    courseId     String          @db.ObjectId // for storing course's id value from Course object
    course       Course          @relation(fields: [courseId], references: [id]) // relates courseId value to id from Course object
    withinRadius Boolean         @default(false)
    status       AttendanceValue @default(Pending) // stores attendance value (default value = Pending)
    timestamp    DateTime        @default(now()) // stores date and time that attendance value was recorded
    createdAt    DateTime        @default(now()) // stores date and time created so that data can be deleted after a time (i.e., when semester's over)

    @@map("AttendanceRecords")
}

model ClassroomLocation {
    id           String @id @default(auto()) @map("_id") @db.ObjectId // auto-generated MongoDB object id
    canvasId     String @unique // stores course canvas id
    courseId     String @unique @db.ObjectId // for storing course's id value from Course object
    course       Course @relation("CourseLocation", fields: [courseId], references: [id]) // relates courseId value to id from User object
    roomNumber   String
    buildingCode String

    @@map("ClassroomLocations")
}
